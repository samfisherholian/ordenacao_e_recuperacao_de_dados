Pega o valor do meior do array e divide este mesmo array em dois arrays
e consequentemente vai dividindo em dois arrays os sub arrays e em seguida ordena


// ordena o array
mergesort(inteiro A[]){

    inteiro tamanho <- length(A)

    se(n > 2) entao{

        inteiro meio_array <- tamanho / 2

        inteiro esquerda[meio]

        inteiro direita[tamanho - meio_array]

        para i <- 0 ate meio_array -1{
            
            esquerda[i] <- A[i]

        }

        para i <- meio ate tamanho-1{

            direita[i - meio_array] <- A[i]

        }

        mergesort(esquerda)

        mergesort(direita)

        merge_(direita, esquerda, A)

    }

}
// insere os valores das sub lista no array
merge_(inteiro, esquerda[], inteiro, direita[], A[]){

    inteiro sizeEsquerda <- length(esquerda)

    inteiro sizeDireita <- length(direita)

    // indices
    inteiro i <- 0

    inteiro j <- 0

    inteiro k <- 0

    enquanto(i < sizeEsquerda E j < sizeDireita) faca{

        // se o valor do array esquerdo for menor que o array direito
        // entçao insere o valor do array esquerdo no array principal
        if(esquerda[i] <= direita[j]) then {

            A[k] <- esquerda[i]

            i <- i + 1
        // se for o contrario da condição de cima então
        // insere o valor da posição do array direito no array principal
        }else then{

            A[k] <- direita[j]

            j <- j+1
        }

        k <- k + 1

    }

    enquanto(i < sizeEsquerda) faca{

        A[k] <- esquerda[i]

        i <- i + 1

        k <- k +1

    }
    enquanto(j < sizeDireita) faca{

        A[k] <- direita[j]

        j <- j + 1

        k <- k + 1

    }

}